[
	{
		"path": "slack",
		"title": "Slack",
		"description": "",
		"content": "\nHow we use Slack to communicate and collaborate.\n",
		"heading": ""
	},
	{
		"path": "slack#mentions-reactions",
		"title": "Slack",
		"description": "",
		"content": "\n\nMake sure that you can check messaged addressed to everyone in Mentions & reactions.\nCheck daily for messages that you haven't reacted / responded to in Mentions & reactions.\nProactively react to other people's messages.\n",
		"heading": "Mentions & Reactions"
	},
	{
		"path": "slack#communication",
		"title": "Slack",
		"description": "",
		"content": "\n\nShare information for the benefit of others.\nSend a message when starting a task.\nSend a message including your thoughts when finishing a task.\n",
		"heading": "Communication"
	},
	{
		"path": "slack",
		"title": "Slack",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "slack#mentions-reactions",
		"title": "Slack",
		"description": "",
		"content": "Mentions & Reactions",
		"heading": "Mentions & Reactions"
	},
	{
		"path": "slack#communication",
		"title": "Slack",
		"description": "",
		"content": "Communication",
		"heading": "Communication"
	},
	{
		"path": "slack",
		"title": "Slack",
		"description": "",
		"content": "Slack",
		"heading": ""
	},
	{
		"path": "docs-history",
		"title": "Docs History",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "docs-history#docs-history",
		"title": "Docs History",
		"description": "",
		"content": "\n\nView history on GitHub\n",
		"heading": "Docs History"
	},
	{
		"path": "docs-history#docs-files",
		"title": "Docs History",
		"description": "",
		"content": "\n\nView files on GitHub\n",
		"heading": "Docs Files"
	},
	{
		"path": "docs-history",
		"title": "Docs History",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "docs-history#docs-history",
		"title": "Docs History",
		"description": "",
		"content": "Docs History",
		"heading": "Docs History"
	},
	{
		"path": "docs-history#docs-files",
		"title": "Docs History",
		"description": "",
		"content": "Docs Files",
		"heading": "Docs Files"
	},
	{
		"path": "docs-history",
		"title": "Docs History",
		"description": "",
		"content": "Docs History",
		"heading": ""
	},
	{
		"path": "our-team-policy",
		"title": "Our Team Policy",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "our-team-policy#teamwork",
		"title": "Our Team Policy",
		"description": "",
		"content": "\n\nOur goal is to grow and strengthen as a team.\nWe aim to partake in enjoyable team-building activities.\nWe pledge to act with the best interests of the team and ourselves in mind.\n",
		"heading": "Teamwork"
	},
	{
		"path": "our-team-policy#deadline-adherence-and-quality-assurance",
		"title": "Our Team Policy",
		"description": "",
		"content": "\n\nWe are committed to honoring project deadlines.\nWe strive to deliver work of the highest quality.\n",
		"heading": "Deadline Adherence and Quality Assurance"
	},
	{
		"path": "our-team-policy#innovative-suggestions",
		"title": "Our Team Policy",
		"description": "",
		"content": "\n\nWe encourage proposing new project ideas.\nWe advocate for active contribution of suggestions.\nWe will foster an environment that promotes continuous improvement.\n",
		"heading": "Innovative Suggestions"
	},
	{
		"path": "our-team-policy#personal-and-team-growth",
		"title": "Our Team Policy",
		"description": "",
		"content": "\n\nWe are dedicated to pursuing personal growth and lifelong learning.\nWe are committed to contributing to the growth of our team and its members.\n",
		"heading": "Personal and Team Growth"
	},
	{
		"path": "our-team-policy#documentation-compliance",
		"title": "Our Team Policy",
		"description": "",
		"content": "\n\nWe will adhere to the guidelines set out in the Documentation for all projects.\nIf application of the guidelines is difficult, unclear, or a more efficient solution is available, we will consult the administrator.\nWe will acknowledge that we have reviewed the Documentation by providing a response.\nEach project lead will confirm when they have fully implemented the guidelines from the Documentation.\n",
		"heading": "Documentation Compliance"
	},
	{
		"path": "our-team-policy#business-etiquette",
		"title": "Our Team Policy",
		"description": "",
		"content": "\n\nIn terms of business etiquette, we will:\n\nInitiate greetings in a proactive and cheerful manner.\nMaintain clear eye contact when greeting others.\n",
		"heading": "Business Etiquette"
	},
	{
		"path": "our-team-policy#workplace-cleanliness",
		"title": "Our Team Policy",
		"description": "",
		"content": "\n\nWe are responsible for tidying up after ourselves.\nWe will maintain the cleanliness and organization of shared spaces.\n",
		"heading": "Workplace Cleanliness"
	},
	{
		"path": "our-team-policy",
		"title": "Our Team Policy",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "our-team-policy#teamwork",
		"title": "Our Team Policy",
		"description": "",
		"content": "Teamwork",
		"heading": "Teamwork"
	},
	{
		"path": "our-team-policy#deadline-adherence-and-quality-assurance",
		"title": "Our Team Policy",
		"description": "",
		"content": "Deadline Adherence and Quality Assurance",
		"heading": "Deadline Adherence and Quality Assurance"
	},
	{
		"path": "our-team-policy#innovative-suggestions",
		"title": "Our Team Policy",
		"description": "",
		"content": "Innovative Suggestions",
		"heading": "Innovative Suggestions"
	},
	{
		"path": "our-team-policy#personal-and-team-growth",
		"title": "Our Team Policy",
		"description": "",
		"content": "Personal and Team Growth",
		"heading": "Personal and Team Growth"
	},
	{
		"path": "our-team-policy#documentation-compliance",
		"title": "Our Team Policy",
		"description": "",
		"content": "Documentation Compliance",
		"heading": "Documentation Compliance"
	},
	{
		"path": "our-team-policy#business-etiquette",
		"title": "Our Team Policy",
		"description": "",
		"content": "Business Etiquette",
		"heading": "Business Etiquette"
	},
	{
		"path": "our-team-policy#workplace-cleanliness",
		"title": "Our Team Policy",
		"description": "",
		"content": "Workplace Cleanliness",
		"heading": "Workplace Cleanliness"
	},
	{
		"path": "our-team-policy",
		"title": "Our Team Policy",
		"description": "",
		"content": "Our Team Policy",
		"heading": ""
	},
	{
		"path": "git-user-profiles",
		"title": "Git User Profiles",
		"description": "",
		"content": "\nThis document will guide you on setting up your git user profiles using the Git Config User Profiles extension in VSCode. This is especially helpful for people who share a development device.\n",
		"heading": ""
	},
	{
		"path": "git-user-profiles#installing-the-extension",
		"title": "Git User Profiles",
		"description": "",
		"content": "\n\nNavigate to the Extensions tab.\nSearch for Git Config User Profiles and install it.\n",
		"heading": "Installing the Extension"
	},
	{
		"path": "git-user-profiles#creating-a-git-config-user-profile",
		"title": "Git User Profiles",
		"description": "",
		"content": "\n\nOpen the command palette with Shift + Command + P.\nSearch and execute git config user profiles: create a git config user profile.\nYou will then be prompted to enter your profile name, account name, and an email address to create your profile.\n",
		"heading": "Creating a Git Config User Profile"
	},
	{
		"path": "git-user-profiles#selecting-a-git-config-user-profile",
		"title": "Git User Profiles",
		"description": "",
		"content": "\n\nOpen the command palette again.\nSearch and execute Git Config User Profiles: Select a git config user profile.\nA confirmation pop-up will appear in the bottom right corner. If there are no issues, proceed with the selection.\n\nNote: This operation will update the account information documented in the open project to the selected profile.\n",
		"heading": "Selecting a Git Config User Profile"
	},
	{
		"path": "git-user-profiles#resolving-account-information-discrepancies",
		"title": "Git User Profiles",
		"description": "",
		"content": "\n\nIf there are discrepancies between the account information in the selected profile and the open file, a warning will be displayed in yellow on the blue bar at the bottom of the screen. To resolve this:\n\nClick on the warning or,\nRepeat step [3] of the Selecting a Git Config User Profile section above to select the correct profile.\n\nView this guide on GitHub >\n",
		"heading": "Resolving Account Information Discrepancies"
	},
	{
		"path": "git-user-profiles",
		"title": "Git User Profiles",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "git-user-profiles#installing-the-extension",
		"title": "Git User Profiles",
		"description": "",
		"content": "Installing the Extension",
		"heading": "Installing the Extension"
	},
	{
		"path": "git-user-profiles#creating-a-git-config-user-profile",
		"title": "Git User Profiles",
		"description": "",
		"content": "Creating a Git Config User Profile",
		"heading": "Creating a Git Config User Profile"
	},
	{
		"path": "git-user-profiles#selecting-a-git-config-user-profile",
		"title": "Git User Profiles",
		"description": "",
		"content": "Selecting a Git Config User Profile",
		"heading": "Selecting a Git Config User Profile"
	},
	{
		"path": "git-user-profiles#resolving-account-information-discrepancies",
		"title": "Git User Profiles",
		"description": "",
		"content": "Resolving Account Information Discrepancies",
		"heading": "Resolving Account Information Discrepancies"
	},
	{
		"path": "git-user-profiles",
		"title": "Git User Profiles",
		"description": "",
		"content": "Git User Profiles",
		"heading": ""
	},
	{
		"path": "github-templates",
		"title": "GitHub Templates",
		"description": "",
		"content": "\nWe use templates for issues and PRs.\n",
		"heading": ""
	},
	{
		"path": "github-templates#issue-template",
		"title": "GitHub Templates",
		"description": "",
		"content": "\n\nIn the template, write tasks for the following:\n\nWriting the Issue\nBefore Working on the Issue\nPre-PR Checks\n\nView this file on GitHub >\n",
		"heading": "Issue Template"
	},
	{
		"path": "github-templates#pull-request-template",
		"title": "GitHub Templates",
		"description": "",
		"content": "\n\nIn the template, write tasks for the following:\n\nFor the Submitter\n  Tasks\nFor the Reviewer\n  Before Reviewing\n  Checks\n  After Reviewing\n\nView this file on GitHub >\n",
		"heading": "Pull Request Template"
	},
	{
		"path": "github-templates",
		"title": "GitHub Templates",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "github-templates#issue-template",
		"title": "GitHub Templates",
		"description": "",
		"content": "Issue Template",
		"heading": "Issue Template"
	},
	{
		"path": "github-templates#pull-request-template",
		"title": "GitHub Templates",
		"description": "",
		"content": "Pull Request Template",
		"heading": "Pull Request Template"
	},
	{
		"path": "github-templates",
		"title": "GitHub Templates",
		"description": "",
		"content": "GitHub Templates",
		"heading": ""
	},
	{
		"path": "github-actions",
		"title": "GitHub Actions",
		"description": "",
		"content": "\nWe use GitHub Actions to perform two types of CI: Checks and tests.\n",
		"heading": ""
	},
	{
		"path": "github-actions#checks",
		"title": "GitHub Actions",
		"description": "",
		"content": "\n\nRun a lint check, a type check, and Svelte check.\n\njobs:\n  check:\n    name: Check\n    runs-on: ubuntu-latest\n    steps:\n      name: Lint Check\n        run: npm run lint\n\n      name: Type Check\n        run: npm run typecheck\n\n      name: Svelte Check\n        run: npm run check\n",
		"heading": "Checks"
	},
	{
		"path": "github-actions#tests",
		"title": "GitHub Actions",
		"description": "",
		"content": "\n\nExecute tests using Vitest and Playwright.\n\njobs:\n  tests:\n    name: Tests\n    runs-on: ubuntu-latest\n    steps:\n      name: Vitest Test\n        run: npm run test:ci\n\n      name: Playwright Test\n        run: npm run test:e2e\n",
		"heading": "Tests"
	},
	{
		"path": "github-actions#output",
		"title": "GitHub Actions",
		"description": "",
		"content": "\n\nOutput Playwright Report and logs.\n\njobs:\n  tests:\n    name: Tests\n    runs-on: ubuntu-latest\n    steps:\n      uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n\n      uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: logs\n          path: logs/\n          retention-days: 30\n",
		"heading": "Output"
	},
	{
		"path": "github-actions",
		"title": "GitHub Actions",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "github-actions#checks",
		"title": "GitHub Actions",
		"description": "",
		"content": "Checks",
		"heading": "Checks"
	},
	{
		"path": "github-actions#tests",
		"title": "GitHub Actions",
		"description": "",
		"content": "Tests",
		"heading": "Tests"
	},
	{
		"path": "github-actions#output",
		"title": "GitHub Actions",
		"description": "",
		"content": "Output",
		"heading": "Output"
	},
	{
		"path": "github-actions",
		"title": "GitHub Actions",
		"description": "",
		"content": "GitHub Actions",
		"heading": ""
	},
	{
		"path": "git-hooks",
		"title": "Git Hooks",
		"description": "",
		"content": "\nWe use lint-staged and Husky for our Git Hooks.\n\nlint-staged - Run linters against staged git files and don't let 💩 slip into your code base!\nHusky - Husky improves your commits and more 🐶 woof!\n",
		"heading": ""
	},
	{
		"path": "git-hooks#lint-staged",
		"title": "Git Hooks",
		"description": "",
		"content": "\nInstallation\n\nnpm install --save-dev lint-staged\n\nSetup\n\n{\n\t\"scripts\": {\n\t\t\"lint\": \"prettier --plugin-search-dir . --check . && eslint .\"\n\t},\n\t\"lint-staged\": {\n\t\t\"*.{js,ts,svelte}\": \"eslint --cache --fix\",\n\t\t\"*.css\": \"stylelint --fix\",\n\t\t\"*.{js,css,md,ts,svelte,css,scss,json}\": \"prettier --write\"\n\t}\n}\n",
		"heading": "lint-staged"
	},
	{
		"path": "git-hooks#husky",
		"title": "Git Hooks",
		"description": "",
		"content": "\nInstallation\n\nnpx husky-init && npm install\n",
		"heading": "Husky"
	},
	{
		"path": "git-hooks#pre-commit",
		"title": "Git Hooks",
		"description": "",
		"content": "\n\nCombine ESLint, Prettier, and lint-staged to format code.\n\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpx lint-staged\n\nnpm run lint\n",
		"heading": "pre-commit"
	},
	{
		"path": "git-hooks#pre-push",
		"title": "Git Hooks",
		"description": "",
		"content": "\n\nPerform TypeScript type checking, run tests with Vitest, and finally check for conflicts.\n\n{\n\t\"scripts\": {\n\t\t\"test:run\": \"vitest run\",\n\t\t\"test:e2e\": \"playwright test\",\n\t\t\"check\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json\",\n\t\t\"typecheck\": \"tsc --noEmit\"\n\t}\n}\n\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpm run typecheck\nnpm run check\n\nnpm run test:run\nnpm run test:e2e\n\nnpm run build\n\ngit fetch origin\ngit merge --no-commit --no-ff origin/main\ngit reset --hard HEAD\n",
		"heading": "pre-push"
	},
	{
		"path": "git-hooks",
		"title": "Git Hooks",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "git-hooks#lint-staged",
		"title": "Git Hooks",
		"description": "",
		"content": "lint-staged",
		"heading": "lint-staged"
	},
	{
		"path": "git-hooks#husky",
		"title": "Git Hooks",
		"description": "",
		"content": "Husky",
		"heading": "Husky"
	},
	{
		"path": "git-hooks#pre-commit",
		"title": "Git Hooks",
		"description": "",
		"content": "pre-commit",
		"heading": "pre-commit"
	},
	{
		"path": "git-hooks#pre-push",
		"title": "Git Hooks",
		"description": "",
		"content": "pre-push",
		"heading": "pre-push"
	},
	{
		"path": "git-hooks",
		"title": "Git Hooks",
		"description": "",
		"content": "Git Hooks",
		"heading": ""
	},
	{
		"path": "git-branches-and-commits",
		"title": "Git Branches and Commits",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "git-branches-and-commits#git-branch-naming-conventions",
		"title": "Git Branches and Commits",
		"description": "",
		"content": "\n\nWrite the issue number and issue title in kebab-case, connected with a hyphen.\n\n743-git-branches-and-commits\n",
		"heading": "Git branch naming conventions"
	},
	{
		"path": "git-branches-and-commits#commit-message-conventions",
		"title": "Git Branches and Commits",
		"description": "",
		"content": "\n\nInclude the issue title and issue number.\n\nDocs: Git Branches and Commits #743\n\nIf there are multiple commits in the same branch, provide additional details.\n\nDocs: Git Branches and Commits #743 Update docs\n",
		"heading": "Commit message conventions"
	},
	{
		"path": "git-branches-and-commits",
		"title": "Git Branches and Commits",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "git-branches-and-commits#git-branch-naming-conventions",
		"title": "Git Branches and Commits",
		"description": "",
		"content": "Git branch naming conventions",
		"heading": "Git branch naming conventions"
	},
	{
		"path": "git-branches-and-commits#commit-message-conventions",
		"title": "Git Branches and Commits",
		"description": "",
		"content": "Commit message conventions",
		"heading": "Commit message conventions"
	},
	{
		"path": "git-branches-and-commits",
		"title": "Git Branches and Commits",
		"description": "",
		"content": "Git Branches and Commits",
		"heading": ""
	},
	{
		"path": "playwright",
		"title": "Playwright",
		"description": "",
		"content": "\nHow we automate our tests using Playwright.\n\nPlaywright is an E2E (end-to-end) testing framework.\n",
		"heading": ""
	},
	{
		"path": "playwright#installation",
		"title": "Playwright",
		"description": "",
		"content": "\n\n$ npm init playwright@latest\n\nGetting started with writing end-to-end tests with Playwright:\nInitializing project in '.'\n✔ Where to put your end-to-end tests? · e2e\n✔ Add a GitHub Actions workflow? (y/N) · N\n✔ Install Playwright browsers (can be done manually via 'npx playwright install')? (Y/n) · Y\n",
		"heading": "Installation"
	},
	{
		"path": "playwright#file-name",
		"title": "Playwright",
		"description": "",
		"content": "\n\nCreate an e2e directory, and name the files as \\*.spec.ts.\n",
		"heading": "File Name"
	},
	{
		"path": "playwright#configuration",
		"title": "Playwright",
		"description": "",
		"content": "\nBasic changes\n\nChange the test directory, timeout duration, and other settings as needed.\n\nConfigure the reporter not to open automatically, and output a video when an error occurs.\n\nconst config: PlaywrightTestConfig = {\n\ttestDir: './e2e',\n\ttimeout: process.env.CI ? 20 * 1000 : 5 * 1000,\n\texpect: {\n\t\ttimeout: 2000,\n\t},\n\tretries: 0,\n\tworkers: process.env.CI ? 1 : undefined,\n\treporter: [['html', { open: 'never' }]],\n\tuse: {\n\t\tvideo: 'retain-on-failure',\n\t},\n}\n\nTarget Browsers\n\nEnsure that tests are not run on browsers where testing is not necessary.\n\nconst config: PlaywrightTestConfig = {\n\tprojects: [\n\t\t{\n\t\t\tname: 'chromium',\n\t\t\tuse: {\n\t\t\t\t...devices['Desktop Chrome'],\n\t\t\t},\n\t\t},\n\n\t\t// {\n\t\t//   name: 'firefox',\n\t\t//   use: {\n\t\t//     ...devices['Desktop Firefox'],\n\t\t//   },\n\t\t// },\n\n\t\t// ...\n\t}\n}\n\nWeb Server\n\nTo perform tests quickly, use a development server. Also, change the baseURL.\n\n\twebServer: [\n\t\t{\n\t\t\tcommand: 'npm run dev',\n\t\t\turl: 'http://127.0.0.1:5173/talk/',\n\t\t\treuseExistingServer: !process.env.CI,\n\t\t},\n\t\t// {\n\t\t// \tcommand: 'npm run build && npm run preview',\n\t\t// \tport: 4173,\n\t\t// \treuseExistingServer: !process.env.CI,\n\t\t// },\n\t],\n\tuse: {\n\t\t\tbaseURL: 'http://127.0.0.1:5173/talk/',\n\t}\n\nMore information >\n\nSetup\n\nSpecify processes to be executed beforehand, such as logging in. Add dependencies to the browser settings.\n\nconst config: PlaywrightTestConfig = {\n\tprojects: [\n\t\t{ name: 'setup', testMatch: /.*\\.setup\\.ts/ },\n\n\t\t{\n\t\t\tname: 'chromium',\n\t\t\tuse: {\n\t\t\t\t...devices['Desktop Chrome'],\n\t\t\t},\n\t\t\tdependencies: ['setup'],\n\t\t},\n\t}\n}\n",
		"heading": "Configuration"
	},
	{
		"path": "playwright#scripts",
		"title": "Playwright",
		"description": "",
		"content": "\n\nWe have prepared the following scripts to execute Vitest.\n\n{\n\t\"scripts\": {\n\t\t\"test:e2e\": \"playwright test\",\n\t\t\"test:e2e:ci\": \"CI=true npm run test:e2e\"\n\t}\n}\n",
		"heading": "Scripts"
	},
	{
		"path": "playwright#vscode-extension",
		"title": "Playwright",
		"description": "",
		"content": "\n\nUse VSCode Extension for testing through VSCode.\n",
		"heading": "VSCode Extension"
	},
	{
		"path": "playwright#locate-by-test-id",
		"title": "Playwright",
		"description": "",
		"content": "\n\nTo make it easier to identify an Element from Playwright, \"data-testid\" can be used.\n\nNext Page\n\nawait page.getByTestId('next-page').click()\n\nMore Information >\n",
		"heading": "Locate by test id"
	},
	{
		"path": "playwright#sample-code",
		"title": "Playwright",
		"description": "",
		"content": "\n\nimport { Page, expect, test } from '@playwright/test'\n\ntest.beforeEach(async ({ page }) => {\n\tawait page.goto('./chat', { waitUntil: 'networkidle' })\n})\n\ntest('before sign in', async ({ page }) => {\n\tawait expect(page).toHaveTitle('Talk - Sign in')\n})\n\nIn cases where common setup is needed, such as for login processes:\n\nimport { Page, expect, test } from '@playwright/test'\nimport { auth_file_path } from './lib/setup.js'\n\ntest.beforeEach(async ({ page }) => {\n\tawait page.goto('./chat', { waitUntil: 'networkidle' })\n})\n\ntest.describe('after sign in', () => {\n\ttest.use({ storageState: auth_file_path })\n\n\ttest('has title', async ({ page }) => {\n\t\tawait expect(page).toHaveTitle('Talk - Chat')\n\t})\n\n\ttest('init focus', async ({ page }) => {\n\t\tconst name = page.getByPlaceholder('Name')\n\t\tawait expect(name).toBeFocused()\n\t})\n})\n",
		"heading": "Sample Code"
	},
	{
		"path": "playwright",
		"title": "Playwright",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "playwright#installation",
		"title": "Playwright",
		"description": "",
		"content": "Installation",
		"heading": "Installation"
	},
	{
		"path": "playwright#file-name",
		"title": "Playwright",
		"description": "",
		"content": "File Name",
		"heading": "File Name"
	},
	{
		"path": "playwright#configuration",
		"title": "Playwright",
		"description": "",
		"content": "Configuration",
		"heading": "Configuration"
	},
	{
		"path": "playwright#scripts",
		"title": "Playwright",
		"description": "",
		"content": "Scripts",
		"heading": "Scripts"
	},
	{
		"path": "playwright#vscode-extension",
		"title": "Playwright",
		"description": "",
		"content": "VSCode Extension",
		"heading": "VSCode Extension"
	},
	{
		"path": "playwright#locate-by-test-id",
		"title": "Playwright",
		"description": "",
		"content": "Locate by test id",
		"heading": "Locate by test id"
	},
	{
		"path": "playwright#sample-code",
		"title": "Playwright",
		"description": "",
		"content": "Sample Code",
		"heading": "Sample Code"
	},
	{
		"path": "playwright",
		"title": "Playwright",
		"description": "",
		"content": "Playwright",
		"heading": ""
	},
	{
		"path": "vitest",
		"title": "Vitest",
		"description": "",
		"content": "\nHow we automate our tests using Vitest.\n\nVitest is a testing framework designed for unit testing.\n",
		"heading": ""
	},
	{
		"path": "vitest#installation",
		"title": "Vitest",
		"description": "",
		"content": "\n\nnpm install -D vitest\n",
		"heading": "Installation"
	},
	{
		"path": "vitest#file-name",
		"title": "Vitest",
		"description": "",
		"content": "\n\nIn the same directory as the file of the code to be tested is in, write test code in a file named [filename of the code to be tested].test.ts.\n",
		"heading": "File Name"
	},
	{
		"path": "vitest#options",
		"title": "Vitest",
		"description": "",
		"content": "\n\nChange the files to be included in the test run.\n\nexport default defineConfig({\n\ttest: {\n\t\tinclude: ['src/*/.test.ts'],\n\t\thookTimeout: 3000,\n\t\tteardownTimeout: 0,\n\t},\n})\n",
		"heading": "Options"
	},
	{
		"path": "vitest#scripts",
		"title": "Vitest",
		"description": "",
		"content": "\n\nWe have prepared the following scripts to execute Vitest.\n\n{\n\t\"scripts\": {\n\t\t\"test\": \"vitest\",\n\t\t\"coverage\": \"vitest run --coverage\",\n\t\t\"test:run\": \"vitest run\",\n\t\t\"test:ci\": \"CI=true npm run test\"\n\t}\n}\n",
		"heading": "Scripts"
	},
	{
		"path": "vitest#vscode-extension",
		"title": "Vitest",
		"description": "",
		"content": "\n\nUse the VSCode Extension for testing.\n",
		"heading": "VSCode Extension"
	},
	{
		"path": "vitest#sample-code",
		"title": "Vitest",
		"description": "",
		"content": "\n\nimport { expect, test } from 'vitest'\nimport { ValidId } from './valid_id'\n\ntest('1', () => {\n\texpect(new ValidId(1).id).toEqual(1)\n})\n\nWhen checking thrown errors:\n\nimport { expect, test } from 'vitest'\nimport { ValidId } from './valid_id'\n\ntest('NaN', () => {\n\texpect(() => new ValidId(NaN)).toThrow('id is not number')\n})\n",
		"heading": "Sample Code"
	},
	{
		"path": "vitest#in-source-testing",
		"title": "Vitest",
		"description": "",
		"content": "\n\nif (import.meta.vitest) {\n\tconst { test, expect } = import.meta.vitest\n\n\ttest('get_initial_app_locale_code', () => {\n\t\texpect(get_initial_locale_code()).toBe('en-US')\n\t})\n}\n\nexport default defineConfig({\n\tdefine: {\n\t\t'import.meta.vitest': 'undefined',\n\t},\n})\n\n{\n\t\"compilerOptions\": {\n\t\t\"types\": [\"vitest/importMeta\"]\n\t}\n}\n\nHere is the official documentation >\n",
		"heading": "In-source testing"
	},
	{
		"path": "vitest",
		"title": "Vitest",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "vitest#installation",
		"title": "Vitest",
		"description": "",
		"content": "Installation",
		"heading": "Installation"
	},
	{
		"path": "vitest#file-name",
		"title": "Vitest",
		"description": "",
		"content": "File Name",
		"heading": "File Name"
	},
	{
		"path": "vitest#options",
		"title": "Vitest",
		"description": "",
		"content": "Options",
		"heading": "Options"
	},
	{
		"path": "vitest#scripts",
		"title": "Vitest",
		"description": "",
		"content": "Scripts",
		"heading": "Scripts"
	},
	{
		"path": "vitest#vscode-extension",
		"title": "Vitest",
		"description": "",
		"content": "VSCode Extension",
		"heading": "VSCode Extension"
	},
	{
		"path": "vitest#sample-code",
		"title": "Vitest",
		"description": "",
		"content": "Sample Code",
		"heading": "Sample Code"
	},
	{
		"path": "vitest#in-source-testing",
		"title": "Vitest",
		"description": "",
		"content": "In-source testing",
		"heading": "In-source testing"
	},
	{
		"path": "vitest",
		"title": "Vitest",
		"description": "",
		"content": "Vitest",
		"heading": ""
	},
	{
		"path": "stylelint",
		"title": "Stylelint",
		"description": "",
		"content": "\nHow we use Stylelint to automate formatting for CSS.\n",
		"heading": ""
	},
	{
		"path": "stylelint#installation",
		"title": "Stylelint",
		"description": "",
		"content": "\n\nnpm i stylelint --save-dev\nnpm i stylelint-config-standard --save-dev\n",
		"heading": "Installation"
	},
	{
		"path": "stylelint#configuration",
		"title": "Stylelint",
		"description": "",
		"content": "\n\n{\n\t\"extends\": [\"stylelint-config-standard\"],\n\t\"rules\": {\n\t\t\"at-rule-no-unknown\": [\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\t\"ignoreAtRules\": [\"extends\", \"tailwind\"]\n\t\t\t}\n\t\t]\n\t}\n}\n",
		"heading": "Configuration"
	},
	{
		"path": "stylelint",
		"title": "Stylelint",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "stylelint#installation",
		"title": "Stylelint",
		"description": "",
		"content": "Installation",
		"heading": "Installation"
	},
	{
		"path": "stylelint#configuration",
		"title": "Stylelint",
		"description": "",
		"content": "Configuration",
		"heading": "Configuration"
	},
	{
		"path": "stylelint",
		"title": "Stylelint",
		"description": "",
		"content": "Stylelint",
		"heading": ""
	},
	{
		"path": "eslint",
		"title": "ESLint",
		"description": "",
		"content": "\nHow we define code style using ESLint.\n",
		"heading": ""
	},
	{
		"path": "eslint#rules",
		"title": "ESLint",
		"description": "",
		"content": "\n\nMake accessibility and return type mandatory.\nProhibit console output.\n\nmodule.exports = {\n\trules: {\n\t\t'@typescript-eslint/explicit-member-accessibility': ['error'],\n\t\t'@typescript-eslint/explicit-function-return-type': ['error'],\n\t\t'no-console': ['error'],\n\t},\n}\n",
		"heading": "Rules"
	},
	{
		"path": "eslint#naming-conventions",
		"title": "ESLint",
		"description": "",
		"content": "\n\nSet variable names, argument names, and function names to snake_case.\nPrefix private variables with an underscore.\n\nmodule.exports = {\n\trules: {\n\t\t'@typescript-eslint/naming-convention': [\n\t\t\t'error',\n\t\t\t{\n\t\t\t\tselector: 'typeParameter',\n\t\t\t\tformat: ['UPPER_CASE'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['class', 'interface', 'typeAlias'],\n\t\t\t\tformat: ['PascalCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tmodifiers: ['private'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tmodifiers: ['protected'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\t// format: ['snake_case', 'camelCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: [\n\t\t\t\t\t'property',\n\t\t\t\t\t'accessor',\n\t\t\t\t\t'parameter',\n\t\t\t\t\t'parameterProperty',\n\t\t\t\t\t'variable',\n\t\t\t\t\t'enumMember',\n\t\t\t\t],\n\t\t\t\tmodifiers: ['private'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: [\n\t\t\t\t\t'property',\n\t\t\t\t\t'accessor',\n\t\t\t\t\t'parameter',\n\t\t\t\t\t'parameterProperty',\n\t\t\t\t\t'variable',\n\t\t\t\t\t'enumMember',\n\t\t\t\t],\n\t\t\t\tmodifiers: ['protected'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['accessor', 'parameter', 'parameterProperty', 'enumMember'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['property'],\n\t\t\t\tformat: ['snake_case', 'camelCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['variable'],\n\t\t\t\tformat: ['snake_case', 'UPPER_CASE'],\n\t\t\t},\n\t\t],\n\t},\n}\n",
		"heading": "Naming conventions"
	},
	{
		"path": "eslint#missing-return-type-on-function-in-the-html-part-of-svelte",
		"title": "ESLint",
		"description": "",
		"content": "\n\nIn the HTML part of Svelte, if \"Missing return type on function\" is displayed, add an eslint-disable line at the bottom of the script block.\n\n\n\t...\n\n\t/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n\n on_click_button(text)} />\n",
		"heading": "Missing return type on function in the HTML part of Svelte"
	},
	{
		"path": "eslint",
		"title": "ESLint",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "eslint#rules",
		"title": "ESLint",
		"description": "",
		"content": "Rules",
		"heading": "Rules"
	},
	{
		"path": "eslint#naming-conventions",
		"title": "ESLint",
		"description": "",
		"content": "Naming conventions",
		"heading": "Naming conventions"
	},
	{
		"path": "eslint#missing-return-type-on-function-in-the-html-part-of-svelte",
		"title": "ESLint",
		"description": "",
		"content": "Missing return type on function in the HTML part of Svelte",
		"heading": "Missing return type on function in the HTML part of Svelte"
	},
	{
		"path": "eslint",
		"title": "ESLint",
		"description": "",
		"content": "ESLint",
		"heading": ""
	},
	{
		"path": "prettier",
		"title": "Prettier",
		"description": "",
		"content": "\nHow we use Prettier to automate formatting.\n",
		"heading": ""
	},
	{
		"path": "prettier#configuration",
		"title": "Prettier",
		"description": "",
		"content": "\n\nWhen creating a SvelteKit project, modify the following items in the generated .prettierrc file:\n\n{\n\t\"trailingComma\": \"es5\",\n\t\"semi\": false\n}\n",
		"heading": "Configuration"
	},
	{
		"path": "prettier#formatting",
		"title": "Prettier",
		"description": "",
		"content": "\n\nEnable format on save and paste events.\nUse Prettier to format TypeScript, JavaScript, HTML, Svelte, and JSON files.\n\n{\n\t\"editor.formatOnSave\": true,\n\t\"editor.formatOnPaste\": true,\n\t\"[typescript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[javascript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[html]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[svelte]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[json]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t}\n}\n",
		"heading": "Formatting"
	},
	{
		"path": "prettier",
		"title": "Prettier",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "prettier#configuration",
		"title": "Prettier",
		"description": "",
		"content": "Configuration",
		"heading": "Configuration"
	},
	{
		"path": "prettier#formatting",
		"title": "Prettier",
		"description": "",
		"content": "Formatting",
		"heading": "Formatting"
	},
	{
		"path": "prettier",
		"title": "Prettier",
		"description": "",
		"content": "Prettier",
		"heading": ""
	},
	{
		"path": "tsconfig",
		"title": "TypeScript Config",
		"description": "",
		"content": "\nHow we modify our TypeScript code style with tsconfig.json.\n",
		"heading": ""
	},
	{
		"path": "tsconfig#tsconfig",
		"title": "TypeScript Config",
		"description": "",
		"content": "\n\nSet strict to true, and further increase strictness by modifying the following options:\n\nallowUnreachableCode\nexactOptionalPropertyTypes\nnoImplicitOverride\nnoImplicitReturns\nnoFallthroughCasesInSwitch\n\n{\n\t\"extends\": \"./.svelte-kit/tsconfig.json\",\n\t\"compilerOptions\": {\n\t\t\"strict\": true,\n\n\t\t\"allowUnreachableCode\": false,\n\t\t\"exactOptionalPropertyTypes\": true,\n\t\t\"noImplicitOverride\": true,\n\t\t\"noImplicitReturns\": true,\n\t\t\"noFallthroughCasesInSwitch\": true\n\t\t// \"noUncheckedIndexedAccess\": true,\n\t}\n}\n",
		"heading": "TSConfig"
	},
	{
		"path": "tsconfig",
		"title": "TypeScript Config",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "tsconfig#tsconfig",
		"title": "TypeScript Config",
		"description": "",
		"content": "TSConfig",
		"heading": "TSConfig"
	},
	{
		"path": "tsconfig",
		"title": "TypeScript Config",
		"description": "",
		"content": "TypeScript Config",
		"heading": ""
	},
	{
		"path": "assets",
		"title": "Assets",
		"description": "",
		"content": "\nWe are using the assets from the following sites:\n",
		"heading": ""
	},
	{
		"path": "assets#icons",
		"title": "Assets",
		"description": "",
		"content": "\n\ntabler ICONS\nGoogle Fonts - Icons\nFreepik - Flaticon\n",
		"heading": "Icons"
	},
	{
		"path": "assets#images",
		"title": "Assets",
		"description": "",
		"content": "\n\nUnsplash\nPixels\n",
		"heading": "Images"
	},
	{
		"path": "assets#fonts",
		"title": "Assets",
		"description": "",
		"content": "\n\nGoogle Fonts\n",
		"heading": "Fonts"
	},
	{
		"path": "assets#sounds",
		"title": "Assets",
		"description": "",
		"content": "\n\npixabay\n",
		"heading": "Sounds"
	},
	{
		"path": "assets",
		"title": "Assets",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "assets#icons",
		"title": "Assets",
		"description": "",
		"content": "Icons",
		"heading": "Icons"
	},
	{
		"path": "assets#images",
		"title": "Assets",
		"description": "",
		"content": "Images",
		"heading": "Images"
	},
	{
		"path": "assets#fonts",
		"title": "Assets",
		"description": "",
		"content": "Fonts",
		"heading": "Fonts"
	},
	{
		"path": "assets#sounds",
		"title": "Assets",
		"description": "",
		"content": "Sounds",
		"heading": "Sounds"
	},
	{
		"path": "assets",
		"title": "Assets",
		"description": "",
		"content": "Assets",
		"heading": ""
	},
	{
		"path": "customize-zsh",
		"title": "Customize Zsh",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "customize-zsh#oh-my-zsh",
		"title": "Customize Zsh",
		"description": "",
		"content": "\n\nOh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout... More Info >\n\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n",
		"heading": "oh-my-zsh"
	},
	{
		"path": "customize-zsh#zsh-completions",
		"title": "Customize Zsh",
		"description": "",
		"content": "\n\nAdditional completion definitions for Zsh. More Info >\n\nbrew install zsh-completions\n\nTo activate these completions, add the following to your .zshrc:\n\nif type brew &>/dev/null; then\n\tFPATH=$(brew --prefix)/share/zsh-completions:$FPATH\n\n\tautoload -Uz compinit\n\tcompinit\nfi\n",
		"heading": "zsh-completions"
	},
	{
		"path": "customize-zsh#zsh-autosuggestions",
		"title": "Customize Zsh",
		"description": "",
		"content": "\n\nIt suggests commands as you type based on history and completions. More Info >\n\nbrew install zsh-autosuggestions\n\nTo activate the autosuggestions, add the following at the end of your .zshrc:\n\nsource /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh\n",
		"heading": "zsh-autosuggestions"
	},
	{
		"path": "customize-zsh#zsh-syntax-highlighting",
		"title": "Customize Zsh",
		"description": "",
		"content": "\n\nFish shell-like syntax highlighting for Zsh. More Info >\n\nbrew install zsh-syntax-highlighting\n\nyou may need to add the following to your .zshenv:\n\nexport ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/opt/homebrew/share/zsh-syntax-highlighting/highlighters\n",
		"heading": "zsh-syntax-highlighting"
	},
	{
		"path": "customize-zsh",
		"title": "Customize Zsh",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "customize-zsh#oh-my-zsh",
		"title": "Customize Zsh",
		"description": "",
		"content": "oh-my-zsh",
		"heading": "oh-my-zsh"
	},
	{
		"path": "customize-zsh#zsh-completions",
		"title": "Customize Zsh",
		"description": "",
		"content": "zsh-completions",
		"heading": "zsh-completions"
	},
	{
		"path": "customize-zsh#zsh-autosuggestions",
		"title": "Customize Zsh",
		"description": "",
		"content": "zsh-autosuggestions",
		"heading": "zsh-autosuggestions"
	},
	{
		"path": "customize-zsh#zsh-syntax-highlighting",
		"title": "Customize Zsh",
		"description": "",
		"content": "zsh-syntax-highlighting",
		"heading": "zsh-syntax-highlighting"
	},
	{
		"path": "customize-zsh",
		"title": "Customize Zsh",
		"description": "",
		"content": "Customize Zsh",
		"heading": ""
	},
	{
		"path": "sveltekit",
		"title": "SvelteKit",
		"description": "",
		"content": "\nFor web application development, we utilize SvelteKit.\n\nThis documentation app is also built using SvelteKit and TypeScript. On the server side, it examines the folder structure to generate menu data, retrieves markdown files, and applies styles using CSS within the browser.\n",
		"heading": ""
	},
	{
		"path": "sveltekit#tutorial",
		"title": "SvelteKit",
		"description": "",
		"content": "\n\nThe SvelteKit official website offers an interactive tutorial for beginners. To get started with Svelte and SvelteKit, we recommend exploring these tutorials first.\n",
		"heading": "Tutorial"
	},
	{
		"path": "sveltekit#docs",
		"title": "SvelteKit",
		"description": "",
		"content": "\n\nMore detailed information can be found in the Docs.\n\nSvelte Docs\nSvelteKit Docs\n",
		"heading": "Docs"
	},
	{
		"path": "sveltekit",
		"title": "SvelteKit",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "sveltekit#tutorial",
		"title": "SvelteKit",
		"description": "",
		"content": "Tutorial",
		"heading": "Tutorial"
	},
	{
		"path": "sveltekit#docs",
		"title": "SvelteKit",
		"description": "",
		"content": "Docs",
		"heading": "Docs"
	},
	{
		"path": "sveltekit",
		"title": "SvelteKit",
		"description": "",
		"content": "SvelteKit",
		"heading": ""
	},
	{
		"path": "global-npm-packages",
		"title": "Global NPM Packages",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "global-npm-packages#installing-packages-globally",
		"title": "Global NPM Packages",
		"description": "",
		"content": "\n\nnpm install -g\n",
		"heading": "Installing packages globally"
	},
	{
		"path": "global-npm-packages#checking-all-global-packages",
		"title": "Global NPM Packages",
		"description": "",
		"content": "\n\nnpm list -g\n",
		"heading": "Checking all global packages"
	},
	{
		"path": "global-npm-packages#the-packages-we-install-globally",
		"title": "Global NPM Packages",
		"description": "",
		"content": "\n\nnpm-check-updates\ntypescript\n",
		"heading": "The packages we install globally"
	},
	{
		"path": "global-npm-packages",
		"title": "Global NPM Packages",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "global-npm-packages#installing-packages-globally",
		"title": "Global NPM Packages",
		"description": "",
		"content": "Installing packages globally",
		"heading": "Installing packages globally"
	},
	{
		"path": "global-npm-packages#checking-all-global-packages",
		"title": "Global NPM Packages",
		"description": "",
		"content": "Checking all global packages",
		"heading": "Checking all global packages"
	},
	{
		"path": "global-npm-packages#the-packages-we-install-globally",
		"title": "Global NPM Packages",
		"description": "",
		"content": "The packages we install globally",
		"heading": "The packages we install globally"
	},
	{
		"path": "global-npm-packages",
		"title": "Global NPM Packages",
		"description": "",
		"content": "Global NPM Packages",
		"heading": ""
	},
	{
		"path": "vscode-extensions",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\nHere are the VSCode extensions that we commonly use at sinProject.\n\nView this file on GitHub >\n",
		"heading": ""
	},
	{
		"path": "vscode-extensions#git",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nGit Graph\n\nView a Git Graph of your repository, and perform Git actions from the graph.\n\nGitHub Pull Request and Issues\n\nPull Request and Issue Provider for GitHub\n\nGitHub Actions\n\nGitHub Actions workflows and runs for github.com hosted repositories in VSCode\n",
		"heading": "Git"
	},
	{
		"path": "vscode-extensions#ai",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nChatGPT - Genie AI\n\nYour best AI pair programmer. Save conversations and continue any time. A Visual Studio Code - ChatGPT Integration. Supports GPT-4, GPT3.5, GPT3 and Codex models. Create new files, view diffs with one click; your copilot to learn code, add tests, find bugs and more.\n\nTabnine AI Autocomplete for Javascript, Python, Typescript, PHP, Go, Java, Ruby & more\n\nJavaScript, Python, Java, Typescript & all other languages - AI Code completion plugin. Tabnine makes developers more productive by auto-completing their code.\n",
		"heading": "AI"
	},
	{
		"path": "vscode-extensions#svelte",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nSvelte for VSCode\n\nSvelte language support for VSCode\n\nSvelte 3 snippets\n\nSvelte 3 Snippets for VSCode\n",
		"heading": "Svelte"
	},
	{
		"path": "vscode-extensions#css",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nTailwind CSS IntelliSense\n\nIntelligent Tailwind CSS tooling for VSCode\n\nCSS Peek\n\nAllow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.\n",
		"heading": "CSS"
	},
	{
		"path": "vscode-extensions#html",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nAuto Rename Tag\n\nAuto rename paired HTML/XML tag\n\nHighlight Matching Tag\n\nHighlights matching closing and opening tags\n\nHTML Preview\n\nProvides ability to preview HTML documents.\n",
		"heading": "HTML"
	},
	{
		"path": "vscode-extensions#code-style",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nESLint\n\nIntegrates ESLint JavaScript into VSCode.\n\nPrettier - Code formatter\n\nCode formatter using prettier\n\nTrailing Spaces\n\nHighlight trailing spaces and delete them in a flash!\n\nCode Spell Checker\n\nSpelling checker for source code\n\n{\n\t\"cSpell.words\": [\n\t\t\"autocompletes\",\n\t\t\"autoincrement\",\n\t\t\"codegen\",\n\t\t...\n\t],\n\t\"cSpell.ignorePaths\": [\n\t\t\"**/settings.json\",\n\t\t\"**/extensions.json\",\n\t\t\"**/package.json\",\n\t\t\"**/package-lock.json\",\n\t\t\"**/yarn.lock\",\n\t\t\"/locales/.json\"\n\t]\n}\n\nStylelint\n\nOfficial Stylelint extension for Visual Studio Code\n",
		"heading": "Code Style"
	},
	{
		"path": "vscode-extensions#intellisense",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nPath Intellisense\n\nVisual Studio Code plugin that autocompletes filenames\n",
		"heading": "Intellisense"
	},
	{
		"path": "vscode-extensions#errors",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nError Lens\n\nImprove highlighting of errors, warnings and other language diagnostics.\n\nPretty TypeScript Errors\n\nMake TypeScript errors prettier and more human-readable in VSCode\n\nError Gutters\n\nShow error gutters to the right from line numbers\n",
		"heading": "Errors"
	},
	{
		"path": "vscode-extensions#testing",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nVitest\n\nRun and debug Vitest test cases\n\n{\n\t\"vitest.include\": [\"src/*/.{test}.ts\"]\n}\n\nPlaywright Test for VSCode\n\nRun Playwright Test tests in Visual Studio Code.\n",
		"heading": "Testing"
	},
	{
		"path": "vscode-extensions#database-management",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nPrisma\n\nAdds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.\n",
		"heading": "Database Management"
	},
	{
		"path": "vscode-extensions#api",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nREST Client\n\nREST Client for Visual Studio Code\n",
		"heading": "API"
	},
	{
		"path": "vscode-extensions#code-execution",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nCode Runner\n\nRun C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim,\n\n{\n\t\"code-runner.executorMap\": {\n\t\t\"typescript\": \"npx tsx\"\n\t}\n}\n\nTurbo Console Log\n\nAutomating the process of writing meaningful log messages.\n",
		"heading": "Code Execution"
	},
	{
		"path": "vscode-extensions#code-quality",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nImport Cost\n\nDisplay import/require package size in the editor\n",
		"heading": "Code Quality"
	},
	{
		"path": "vscode-extensions#theme",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nMaterial Icon Theme\n\nMaterial Design Icons for Visual Studio Code\n",
		"heading": "Theme"
	},
	{
		"path": "vscode-extensions#team-collaboration",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nLive Share\n\nReal-time collaborative development from the comfort of your favorite tools.\n",
		"heading": "Team Collaboration"
	},
	{
		"path": "vscode-extensions#localization",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\ni18n Ally\n\n🌍 All in one i18n extension for VSCode\n\n{\n\t\"i18n-ally.localesPaths\": [\"src/locales\", \"src/routes/api/languages\", \"src/routes/api/locales\"],\n\t\"i18n-ally.keystyle\": \"nested\",\n\t\"i18n-ally.displayLanguage\": \"en-US\",\n\t\"i18n-ally.sourceLanguage\": \"en-US\"\n}\n",
		"heading": "Localization"
	},
	{
		"path": "vscode-extensions#other",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\n\nToDo Tree\n\nShow TODO, FIXME, etc. comment tags in a tree view\n\nBookmarks\n\nMark lines and jump to them\n\nPostCSS Language Support\n\nSyntax highlighting for modern and experimental CSS in VSCode\n",
		"heading": "Other"
	},
	{
		"path": "vscode-extensions",
		"title": "VSCode Extensions",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "vscode-extensions#git",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Git",
		"heading": "Git"
	},
	{
		"path": "vscode-extensions#ai",
		"title": "VSCode Extensions",
		"description": "",
		"content": "AI",
		"heading": "AI"
	},
	{
		"path": "vscode-extensions#svelte",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Svelte",
		"heading": "Svelte"
	},
	{
		"path": "vscode-extensions#css",
		"title": "VSCode Extensions",
		"description": "",
		"content": "CSS",
		"heading": "CSS"
	},
	{
		"path": "vscode-extensions#html",
		"title": "VSCode Extensions",
		"description": "",
		"content": "HTML",
		"heading": "HTML"
	},
	{
		"path": "vscode-extensions#code-style",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Code Style",
		"heading": "Code Style"
	},
	{
		"path": "vscode-extensions#intellisense",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Intellisense",
		"heading": "Intellisense"
	},
	{
		"path": "vscode-extensions#errors",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Errors",
		"heading": "Errors"
	},
	{
		"path": "vscode-extensions#testing",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Testing",
		"heading": "Testing"
	},
	{
		"path": "vscode-extensions#database-management",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Database Management",
		"heading": "Database Management"
	},
	{
		"path": "vscode-extensions#api",
		"title": "VSCode Extensions",
		"description": "",
		"content": "API",
		"heading": "API"
	},
	{
		"path": "vscode-extensions#code-execution",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Code Execution",
		"heading": "Code Execution"
	},
	{
		"path": "vscode-extensions#code-quality",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Code Quality",
		"heading": "Code Quality"
	},
	{
		"path": "vscode-extensions#theme",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Theme",
		"heading": "Theme"
	},
	{
		"path": "vscode-extensions#team-collaboration",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Team Collaboration",
		"heading": "Team Collaboration"
	},
	{
		"path": "vscode-extensions#localization",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Localization",
		"heading": "Localization"
	},
	{
		"path": "vscode-extensions#other",
		"title": "VSCode Extensions",
		"description": "",
		"content": "Other",
		"heading": "Other"
	},
	{
		"path": "vscode-extensions",
		"title": "VSCode Extensions",
		"description": "",
		"content": "VSCode Extensions",
		"heading": ""
	},
	{
		"path": "vscode-workspace-settings",
		"title": "VSCode Workspace Settings",
		"description": "",
		"content": "\nHere are the VSCode workspace settings that we commonly use at sinProject.\n",
		"heading": ""
	},
	{
		"path": "vscode-workspace-settings#bracket-pairs",
		"title": "VSCode Workspace Settings",
		"description": "",
		"content": "\n\nShow lines connecting pairs of brackets\n\n{\n\t\"editor.guides.bracketPairs\": true\n}\n",
		"heading": "Bracket Pairs"
	},
	{
		"path": "vscode-workspace-settings#minimap",
		"title": "VSCode Workspace Settings",
		"description": "",
		"content": "\n\nHide Minimap\n\n{\n\t\"editor.minimap.enabled\": false\n}\n",
		"heading": "Minimap"
	},
	{
		"path": "vscode-workspace-settings",
		"title": "VSCode Workspace Settings",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "vscode-workspace-settings#bracket-pairs",
		"title": "VSCode Workspace Settings",
		"description": "",
		"content": "Bracket Pairs",
		"heading": "Bracket Pairs"
	},
	{
		"path": "vscode-workspace-settings#minimap",
		"title": "VSCode Workspace Settings",
		"description": "",
		"content": "Minimap",
		"heading": "Minimap"
	},
	{
		"path": "vscode-workspace-settings",
		"title": "VSCode Workspace Settings",
		"description": "",
		"content": "VSCode Workspace Settings",
		"heading": ""
	},
	{
		"path": "macos-settings",
		"title": "macOS Settings",
		"description": "",
		"content": "\nHere are the macOS settings that we commonly use at sinProject.\n",
		"heading": ""
	},
	{
		"path": "macos-settings#system-settings",
		"title": "macOS Settings",
		"description": "",
		"content": "\nAppearance\n\nAppearance: Dark\n\nLanguage & Region\n\nAdd English to the beginning of your preferred language\n\nDisplays\n\nSelect More Space to increase the amount of information displayed\n\nTrackpad\n\nTap to click: ON\n\nTrackpad Options\n\nUse trackpad for dragging: ON\nDragging style: Three Finger Drag\n\nKeyboard\n\nKey repeat rate: Fast\nDelay until repeat: Short\n\nFunction Keys\n\nUse F1, F2, etc: ON\n\nCustomize modifier keys\n\nCaps Lock key: Command\n\nControl Center\n\nBluetooth: Show in Menu Bar\n\nDesktop & Dock\n\nDock: Automatically hide and show the Dock: ON\n",
		"heading": "System Settings"
	},
	{
		"path": "macos-settings#dock",
		"title": "macOS Settings",
		"description": "",
		"content": "\n\nRight click all apps and turn off Options > Keep in Dock\n",
		"heading": "Dock"
	},
	{
		"path": "macos-settings#finder",
		"title": "macOS Settings",
		"description": "",
		"content": "\n\nMenu > View > Show Path Bar\nMenu > Settings > Sidebar > [Account Name]: Checked\nMenu > Settings > Advanced > Show all filename extensions: Checked\n\nShow hidden files in Finder with Command + Shift + .\n",
		"heading": "Finder"
	},
	{
		"path": "macos-settings#apps",
		"title": "macOS Settings",
		"description": "",
		"content": "\n\nHomebrew\nAlfred\n  Appearance: Alfred Modern Dark\n  Advanced > Force Keyboard: Alphanumeric (Google)\nGoogle Japanese Input\n  Input Preferences: General > Space input style: Halfwidth\n  Open Keyboard Settings: Remove everything except ABC, Alphanumeric (Google), Hiragana (Google).\nGoogle Chrome\nVSCode\nSlack\nLINE\n",
		"heading": "Apps"
	},
	{
		"path": "macos-settings",
		"title": "macOS Settings",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "macos-settings#system-settings",
		"title": "macOS Settings",
		"description": "",
		"content": "System Settings",
		"heading": "System Settings"
	},
	{
		"path": "macos-settings#dock",
		"title": "macOS Settings",
		"description": "",
		"content": "Dock",
		"heading": "Dock"
	},
	{
		"path": "macos-settings#finder",
		"title": "macOS Settings",
		"description": "",
		"content": "Finder",
		"heading": "Finder"
	},
	{
		"path": "macos-settings#apps",
		"title": "macOS Settings",
		"description": "",
		"content": "Apps",
		"heading": "Apps"
	},
	{
		"path": "macos-settings",
		"title": "macOS Settings",
		"description": "",
		"content": "macOS Settings",
		"heading": ""
	},
	{
		"path": "app-structure",
		"title": "App Structure",
		"description": "",
		"content": "\nThis app consists the following screens:\n\nTalk\nTranslate\nChat\nDocs\n",
		"heading": ""
	},
	{
		"path": "app-structure#talk",
		"title": "App Structure",
		"description": "",
		"content": "\n\nOn the Talk screen, you can select sentences and listen to how they are pronounced.\n\nAfter listening, you can check your own pronunciation through the app.\n\nYou can also register new sentences and add new translations.\n",
		"heading": "Talk"
	},
	{
		"path": "app-structure#translate",
		"title": "App Structure",
		"description": "",
		"content": "\n\nOn the Translate screen, people can have spoken conversations with other people who speak different languages.\n\nWhen you speak, your words will be displayed in the other party's language and you will hear their words in your own language.\n\nThis service allows you to converse in your own language and have a conversation with someone who speaks a different language.\n",
		"heading": "Translate"
	},
	{
		"path": "app-structure#chat",
		"title": "App Structure",
		"description": "",
		"content": "\n\nOn the Chat screen, people can converse through text online with people who speak different languages.\n\nEach user sends messages in their native language, and if the participants speak different languages, their messages will be automatically translated.\n\nAdditionally, when a participating member speaks in a different language, their message will be translated into the receiver's language.\n",
		"heading": "Chat"
	},
	{
		"path": "app-structure#docs",
		"title": "App Structure",
		"description": "",
		"content": "\n\nWe have the following documentation pages available:\n\nGetting Started - Introduction and usage guide for this app.\nDevelopment - An introduction to development methods for our services.\nOur Concepts - An explanation of our development concepts.\n",
		"heading": "Docs"
	},
	{
		"path": "app-structure",
		"title": "App Structure",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "app-structure#talk",
		"title": "App Structure",
		"description": "",
		"content": "Talk",
		"heading": "Talk"
	},
	{
		"path": "app-structure#translate",
		"title": "App Structure",
		"description": "",
		"content": "Translate",
		"heading": "Translate"
	},
	{
		"path": "app-structure#chat",
		"title": "App Structure",
		"description": "",
		"content": "Chat",
		"heading": "Chat"
	},
	{
		"path": "app-structure#docs",
		"title": "App Structure",
		"description": "",
		"content": "Docs",
		"heading": "Docs"
	},
	{
		"path": "app-structure",
		"title": "App Structure",
		"description": "",
		"content": "App Structure",
		"heading": ""
	},
	{
		"path": "creating-a-project",
		"title": "Creating a Project",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "creating-a-project#prerequisites",
		"title": "Creating a Project",
		"description": "",
		"content": "\n\nMySQL Community Server 8.0.30 or higher\nNode.js 18.4.0 or higher\nnpm 8.13.2 or higher\n",
		"heading": "Prerequisites"
	},
	{
		"path": "creating-a-project#prerequisites-for-text-to-speech",
		"title": "Creating a Project",
		"description": "",
		"content": "\n\nSet up Google Cloud Text-to-Speech\n",
		"heading": "Prerequisites for Text-to-Speech"
	},
	{
		"path": "creating-a-project#prerequisites-for-translation",
		"title": "Creating a Project",
		"description": "",
		"content": "\n\nSet up DeepL API\n",
		"heading": "Prerequisites for Translation"
	},
	{
		"path": "creating-a-project#setting-up-the-project",
		"title": "Creating a Project",
		"description": "",
		"content": "\n\nHere are the steps:\n\nGet the project and setup:\n\nClone the repo to your current directory\ngit clone https://github.com/sinProject-Inc/talk.git\n\nInstall the dependencies\ncd /talk\nnpm install\n\nCreate a database with the name \"talk\"\nCreate a .env file by copying .env.example at the top level of the project\nRewrite the .env file with your environment variables\nPush the initial schema and data to the database:\n\nnpx prisma db push\nnpx prisma generate\nnpx prisma db seed\n\nInstall Redis, and run the command: redis-server\nRun locally\n\nStart the server and open the app in a new browser tab\nnpm run dev -- --open\n",
		"heading": "Setting up the project"
	},
	{
		"path": "creating-a-project",
		"title": "Creating a Project",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "creating-a-project#prerequisites",
		"title": "Creating a Project",
		"description": "",
		"content": "Prerequisites",
		"heading": "Prerequisites"
	},
	{
		"path": "creating-a-project#prerequisites-for-text-to-speech",
		"title": "Creating a Project",
		"description": "",
		"content": "Prerequisites for Text-to-Speech",
		"heading": "Prerequisites for Text-to-Speech"
	},
	{
		"path": "creating-a-project#prerequisites-for-translation",
		"title": "Creating a Project",
		"description": "",
		"content": "Prerequisites for Translation",
		"heading": "Prerequisites for Translation"
	},
	{
		"path": "creating-a-project#setting-up-the-project",
		"title": "Creating a Project",
		"description": "",
		"content": "Setting up the project",
		"heading": "Setting up the project"
	},
	{
		"path": "creating-a-project",
		"title": "Creating a Project",
		"description": "",
		"content": "Creating a Project",
		"heading": ""
	},
	{
		"path": "introduction",
		"title": "Introduction",
		"description": "Thanks for reading this documentation.",
		"content": "",
		"heading": ""
	},
	{
		"path": "introduction#before-we-begin",
		"title": "Introduction",
		"description": "Thanks for reading this documentation.",
		"content": "An email address is required to use the service.\nIf you're reading this document to learn Svelte or SvelteKit, try the Svelte tutorial first.\nIf you get stuck, ask for help at @iam_o_sin on Twitter.\n",
		"heading": "Before we begin"
	},
	{
		"path": "introduction#what-is-talk",
		"title": "Introduction",
		"description": "Thanks for reading this documentation.",
		"content": "\n\nTalk is an app for conversing in real time with people who speak different languages. You can learn languages in addition to also having conversations through both voice and text.\n",
		"heading": "What is Talk?"
	},
	{
		"path": "introduction#what-is-sinproject",
		"title": "Introduction",
		"description": "Thanks for reading this documentation.",
		"content": "\n\nsinProject Inc. is an software development company in Osaka, Japan. We primarily use SvelteKit and TypeScript, but also work with other programming languages and frameworks.\n",
		"heading": "What is sinProject?"
	},
	{
		"path": "introduction#what-does-talk-offer-sinproject",
		"title": "Introduction",
		"description": "Thanks for reading this documentation.",
		"content": "\n\nTalk was created to establish coding conventions and development policies at sinProject Inc.\n\nThis guide covers various topics, such as how to use TypeScript, coding styles, GitHub workflows, defining GitHub Actions, login procedures, handling external APIs, and more. It serves as a comprehensive guideline for product development at sinProject.\n",
		"heading": "What does Talk offer sinProject?"
	},
	{
		"path": "introduction",
		"title": "Introduction",
		"description": "",
		"content": "",
		"heading": ""
	},
	{
		"path": "introduction#before-we-begin",
		"title": "Introduction",
		"description": "",
		"content": "Before we begin",
		"heading": "Before we begin"
	},
	{
		"path": "introduction#what-is-talk",
		"title": "Introduction",
		"description": "",
		"content": "What is Talk?",
		"heading": "What is Talk?"
	},
	{
		"path": "introduction#what-is-sinproject",
		"title": "Introduction",
		"description": "",
		"content": "What is sinProject?",
		"heading": "What is sinProject?"
	},
	{
		"path": "introduction#what-does-talk-offer-sinproject",
		"title": "Introduction",
		"description": "",
		"content": "What does Talk offer sinProject?",
		"heading": "What does Talk offer sinProject?"
	},
	{
		"path": "introduction",
		"title": "Introduction",
		"description": "",
		"content": "Introduction",
		"heading": ""
	}
]
