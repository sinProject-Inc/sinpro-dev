[
	{
		"path": "docs/40-testing/20-playwright.md",
		"title": "Playwright",
		"content": "\nHow we automate our tests using [Playwright](https://playwright.dev/).\n\nPlaywright is an E2E (end-to-end) testing framework.\n\n## File Name\n\nCreate an e2e directory, and name the files as \\*.spec.ts.\n\n## Configuration\n\n### Basic changes\n\nChange the test directory, timeout duration, and other settings as needed.\n\nConfigure the reporter not to open automatically, and output a video when an error occurs.\n\n```ts\n// playwright.config.ts\nconst config: PlaywrightTestConfig = {\n\ttestDir: './e2e',\n\ttimeout: 5 * 1000,\n\texpect: {\n\t\ttimeout: 2000,\n\t},\n\tretries: process.env.CI ? 1 : 0,\n\treporter: [['html', { open: 'never' }]],\n\tuse: {\n\t\tvideo: 'retain-on-failure',\n\t},\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/playwright.config.ts)\n\n### Target Browsers\n\nEnsure that tests are not run on browsers where testing is not necessary.\n\n```ts\n// playwright.config.ts\nconst config: PlaywrightTestConfig = {\n\tprojects: [\n\t\t{\n\t\t\tname: 'chromium',\n\t\t\tuse: {\n\t\t\t\t...devices['Desktop Chrome'],\n\t\t\t},\n\t\t},\n\n\t\t// {\n\t\t//   name: 'firefox',\n\t\t//   use: {\n\t\t//     ...devices['Desktop Firefox'],\n\t\t//   },\n\t\t// },\n\n\t\t// ...\n\t}\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/playwright.config.ts)\n\n### Web Server\n\nTo perform tests quickly, use a development server. Also, change the baseURL.\n\n```ts\n\twebServer: [\n\t\t{\n\t\t\tcommand: 'npm run dev',\n\t\t\turl: 'http://127.0.0.1:5173',\n\t\t\treuseExistingServer: !process.env.CI,\n\t\t},\n\t\t// {\n\t\t// \tcommand: 'npm run build && npm run preview',\n\t\t// \tport: 4173,\n\t\t// \treuseExistingServer: !process.env.CI,\n\t\t// },\n\t],\n\tuse: {\n\t\tbaseURL: 'http://127.0.0.1:5173',\n\t}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/playwright.config.ts)\n\n[More information >](https://playwright.dev/docs/test-webserver#adding-a-baseurl)\n\n### Setup\n\nSpecify processes to be executed beforehand, such as logging in. Add dependencies to the browser settings.\n\n```ts\n// playwright.config.ts\nconst config: PlaywrightTestConfig = {\n\tprojects: [\n\t\t{ name: 'setup', testMatch: /.*\\.setup\\.ts/ },\n\n\t\t{\n\t\t\tname: 'chromium',\n\t\t\tuse: {\n\t\t\t\t...devices['Desktop Chrome'],\n\t\t\t},\n\t\t\tdependencies: ['setup'],\n\t\t},\n\t}\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/playwright.config.ts)\n\n## Sample Code\n\n```ts\n// e2e/chat.spec.ts\nimport { Page, expect, test } from '@playwright/test'\n\nconst url = `/chat`\n\ntest.beforeEach(async ({ page }) => {\n\tawait page.goto('/chat')\n})\n\ntest('before sign in', async ({ page }) => {\n\tawait expect(page).toHaveTitle('Talk - Sign in')\n})\n```\n\nIn cases where common setup is needed, such as for login processes:\n\n```ts\n// e2e/chat.spec.ts\nimport { Page, expect, test } from '@playwright/test'\nimport { auth_file_path } from './lib/setup.js'\n\ntest.beforeEach(async ({ page }) => {\n\tawait page.goto('/chat')\n})\n\ntest.describe('after sign in', () => {\n\ttest.use({ storageState: auth_file_path })\n\n\ttest('has title', async ({ page }) => {\n\t\tawait expect(page).toHaveTitle('Talk - Chat')\n\t})\n\n\ttest('init focus', async ({ page }) => {\n\t\tconst name = page.getByPlaceholder('Name')\n\t\tawait expect(name).toBeFocused()\n\t})\n})\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/e2e/chat.spec.ts)\n\n## Scripts\n\nWe have prepared the following scripts to execute Vitest.\n\n```json\n// package.json\n{\n\t\"scripts\": {\n\t\t\"test:e2e\": \"playwright test\",\n\t\t\"test:ci\": \"CI=true npm run test\"\n\t}\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/package.json)\n\n## VSCode Extension\n\nUse the [VSCode Extension](./vscode-extensions#testing) for testing.\n"
	},
	{
		"path": "docs/40-testing/10-vitest.md",
		"title": "Vitest",
		"content": "\nHow we automate our tests using [Vitest](https://vitest.dev/).\n\nVitest is a testing framework designed for unit testing.\n\n## File Name\n\nIn the same directory as the file of the code to be tested is in, write test code in a file named [filename of the code to be tested].test.ts.\n\n## Sample Code\n\n```ts\n// src/lib/genera/valid_id.test.ts\nimport { expect, test } from 'vitest'\nimport { ValidId } from './valid_id'\n\ntest('1', () => {\n\texpect(new ValidId(1).id).toEqual(1)\n})\n```\n\nWhen checking thrown errors:\n\n```ts\n// src/lib/genera/valid_id.test.ts\nimport { expect, test } from 'vitest'\nimport { ValidId } from './valid_id'\n\ntest('NaN', () => {\n\texpect(() => new ValidId(NaN)).toThrow('id is not number')\n})\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/src/lib/general/valid_id.test.ts)\n\n## Scripts\n\nWe have prepared the following scripts to execute Vitest.\n\n```json\n// package.json\n{\n\t\"scripts\": {\n\t\t\"test\": \"vitest\",\n\t\t\"coverage\": \"vitest run --coverage\",\n\t\t\"test:run\": \"vitest run\"\n\t}\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/package.json)\n\n## Options\n\nChange the files to be included in the test run.\n\n```ts\n// vite.config.ts\nexport default defineConfig({\n\ttest: {\n\t\tinclude: ['src/**/*.test.ts'],\n\t},\n})\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/vite.config.ts)\n\n## VSCode Extension\n\nUse the [VSCode Extension](./vscode-extensions#testing) for testing.\n"
	},
	{
		"path": "docs/30-code-style/30-eslint.md",
		"title": "ESLint",
		"content": "\nHow we define code style using [ESLint](https://eslint.org/).\n\n## Rules\n\n- Make accessibility and return type mandatory.\n- Prohibit console output.\n\n```js\n// .eslintrc.cjs\nmodule.exports = {\n\trules: {\n\t\t'@typescript-eslint/explicit-member-accessibility': ['error'],\n\t\t'@typescript-eslint/explicit-function-return-type': ['error'],\n\t\t'no-console': ['error'],\n\t},\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/.eslintrc.cjs)\n\n## Naming conventions\n\n- Set variable names, argument names, and function names to snake_case.\n- Prefix private variables with an underscore.\n\n```js\n// .eslintrc.cjs\nmodule.exports = {\n\trules: {\n\t\t'@typescript-eslint/naming-convention': [\n\t\t\t'error',\n\t\t\t{\n\t\t\t\tselector: 'typeParameter',\n\t\t\t\tformat: ['UPPER_CASE'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['class', 'interface', 'typeAlias'],\n\t\t\t\tformat: ['PascalCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tmodifiers: ['private'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tmodifiers: ['protected'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\t// format: ['snake_case', 'camelCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: [\n\t\t\t\t\t'property',\n\t\t\t\t\t'accessor',\n\t\t\t\t\t'parameter',\n\t\t\t\t\t'parameterProperty',\n\t\t\t\t\t'variable',\n\t\t\t\t\t'enumMember',\n\t\t\t\t],\n\t\t\t\tmodifiers: ['private'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: [\n\t\t\t\t\t'property',\n\t\t\t\t\t'accessor',\n\t\t\t\t\t'parameter',\n\t\t\t\t\t'parameterProperty',\n\t\t\t\t\t'variable',\n\t\t\t\t\t'enumMember',\n\t\t\t\t],\n\t\t\t\tmodifiers: ['protected'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['accessor', 'parameter', 'parameterProperty', 'enumMember'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['property'],\n\t\t\t\tformat: ['snake_case', 'camelCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['variable'],\n\t\t\t\tformat: ['snake_case', 'UPPER_CASE'],\n\t\t\t},\n\t\t],\n\t},\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/.eslintrc.cjs)\n"
	},
	{
		"path": "docs/30-code-style/20-prettier.md",
		"title": "Prettier",
		"content": "\nHow we use [Prettier](https://prettier.io/) to automate formatting.\n\n## Configuration\n\nWhen creating a SvelteKit project, modify the following items in the generated .prettierrc file:\n\n```json\n// .prettierrc\n{\n\t\"trailingComma\": \"es5\",\n\t\"semi\": false\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/.prettierrc)\n\n## Formatting\n\n- Enable format on save and paste events.\n- Use Prettier to format TypeScript, JavaScript, HTML, Svelte, and JSON files.\n\n```json\n// .vscode/settings.json\n{\n\t\"editor.formatOnSave\": true,\n\t\"editor.formatOnPaste\": true,\n\t\"[typescript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[javascript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[html]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[svelte]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[json]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t}\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/.vscode/settings.json)\n"
	},
	{
		"path": "docs/30-code-style/10-tsconfig.md",
		"title": "TypeScript Config",
		"content": "\nHow we modify our TypeScript code style with tsconfig.json.\n\n## TSConfig\n\nSet strict to true, and further increase strictness by modifying the following options:\n\n- [allowUnreachableCode](https://www.typescriptlang.org/tsconfig#allowUnreachableCode)\n- [exactOptionalPropertyTypes](https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes)\n- [noImplicitOverride](https://www.typescriptlang.org/tsconfig#noImplicitOverride)\n- [noImplicitReturns](https://www.typescriptlang.org/tsconfig#noImplicitReturns)\n- [noFallthroughCasesInSwitch](https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch)\n\n```json\n/// tsconfig.json\n{\n\t\"extends\": \"./.svelte-kit/tsconfig.json\",\n\t\"compilerOptions\": {\n\t\t\"strict\": true,\n\n\t\t\"allowUnreachableCode\": false,\n\t\t\"exactOptionalPropertyTypes\": true,\n\t\t\"noImplicitOverride\": true,\n\t\t\"noImplicitReturns\": true,\n\t\t\"noFallthroughCasesInSwitch\": true\n\t\t// \"noUncheckedIndexedAccess\": true,\n\t}\n}\n```\n\n[View this file on GitHub >](https://github.com/sinProject-Inc/talk/blob/main/tsconfig.json)\n"
	},
	{
		"path": "docs/20-development/10-vscode-extensions.md",
		"title": "VSCode Extensions",
		"content": "\nIntroducing the VS Code extensions we use at sinProject.\n\n## Git\n\n- [Git Graph](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)\n\nView a Git Graph of your repository, and perform Git actions from the graph.\n\n- [GitHub Pull Request and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github)\n\nPull Request and Issue Provider for GitHub\n\n- [GitHub Actions](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-github-actions)\n\nGitHub Actions workflows and runs for github.com hosted repositories in VS Code\n\n## AI\n\n- [ChatGPT - Genie AI](https://marketplace.visualstudio.com/items?itemName=genieai.chatgpt-vscode)\n\nYour best AI pair programmer. Save conversations and continue any time. A Visual Studio Code - ChatGPT Integration. Supports GPT-4, GPT3.5, GPT3 and Codex models. Create new files, view diffs with one click; your copilot to learn code, add tests, find bugs and more.\n\n- [Tabnine AI Autocomplete for Javascript, Python, Typescript, PHP, Go, Java, Ruby & more](https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode)\n\nJavaScript, Python, Java, Typescript & all other languages - AI Code completion plugin. Tabnine makes developers more productive by auto-completing their code.\n\n## Svelte\n\n- [Svelte for VS Code](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode)\n\nSvelte language support for VS Code\n\n- [Svelte 3 snippets](https://marketplace.visualstudio.com/items?itemName=fivethree.vscode-svelte-snippets)\n\nSvelte 3 Snippets for VS Code\n\n## CSS\n\n- [Tailwind CSS IntelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss)\n\nIntelligent Tailwind CSS tooling for VS Code\n\n- [CSS Peek](https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek)\n\nAllow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.\n\n## HTML\n\n- [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag)\n\nAuto rename paired HTML/XML tag\n\n- [Highlight Matching Tag](https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag)\n\nHighlights matching closing and opening tags\n\n- [HTML Preview](https://marketplace.visualstudio.com/items?itemName=george-alisson.html-preview-vscode)\n\nProvides ability to preview HTML documents.\n\n## Code Style\n\n- [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n\nIntegrates ESLint JavaScript into VS Code.\n\n- [Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n\nCode formatter using prettier\n\n- [Trailing Spaces](https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces)\n\nHighlight trailing spaces and delete them in a flash!\n\n- [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker)\n\nSpelling checker for source code\n\n- [Stylelint](https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint)\n\nOfficial Stylelint extension for Visual Studio Code\n\n## Intellisense\n\n- [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n\nVisual Studio Code plugin that autocompletes filenames\n\n## Errors\n\n- [Error Lens](https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens)\n\nImprove highlighting of errors, warnings and other language diagnostics.\n\n- [Pretty TypeScript Errors](https://marketplace.visualstudio.com/items?itemName=yoavbls.pretty-ts-errors)\n\nMake TypeScript errors prettier and more human-readable in VSCode\n\n- [Error Gutters](https://marketplace.visualstudio.com/items?itemName=IgorSbitnev.error-gutters)\n\nShow error gutters to the right from line numbers\n\n## Testing\n\n- [Vitest](https://marketplace.visualstudio.com/items?itemName=ZixuanChen.vitest-explorer)\n\nRun and debug Vitest test cases\n\n- [Playwright Test for VSCode](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright)\n\nRun Playwright Test tests in Visual Studio Code.\n\n## Database Management\n\n- [Prisma](https://marketplace.visualstudio.com/items?itemName=Prisma.prisma)\n\nAdds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.\n\n## API\n\n- [REST Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client)\n\nREST Client for Visual Studio Code\n\n## Code Execution\n\n- [Code Runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)\n\nRun C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim,\n\n- [Turbo Console Log](https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log)\n\nAutomating the process of writing meaningful log messages.\n\n## Code Quality\n\n- [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)\n\nDisplay import/require package size in the editor\n\n## Theme\n\n- [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme)\n\nMaterial Design Icons for Visual Studio Code\n\n## Team Collaboration\n\n- [Live Share](https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare)\n\nReal-time collaborative development from the comfort of your favorite tools.\n\n## Localization\n\n- [i18n Ally](https://marketplace.visualstudio.com/items?itemName=Lokalise.i18n-ally)\n\n🌍 All in one i18n extension for VS Code\n\n## Other\n\n- [ToDo Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree)\n\nShow TODO, FIXME, etc. comment tags in a tree view\n\n- [Bookmarks](https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks)\n\nMark lines and jump to them\n\n- [PostCSS Language Support](https://marketplace.visualstudio.com/items?itemName=csstools.postcss)\n\nSyntax highlighting for modern and experimental CSS in VSCode\n"
	},
	{
		"path": "docs/10-getting-started/30-app-structure.md",
		"title": "App Structure",
		"content": "\nThis app consists the following screens:\n\n- [Talk](#talk)\n- [Translate](#translate)\n- [Chat](#chat)\n- [Docs](#docs)\n\n## Talk\n\nOn the [Talk](/) screen, you can select sentences and listen to how they are pronounced.\n\nAfter listening, you can check your own pronunciation through the app.\n\nYou can also register new sentences and add new translations.\n\n## Translate\n\nOn the [Translate](/translate) screen, people can have spoken conversations with other people who speak different languages.\n\nWhen you speak, your words will be displayed in the other party's language and you will hear their words in your own language.\n\nThis service allows you to converse in your own language and have a conversation with someone who speaks a different language.\n\n## Chat\n\nOn the [Chat](/chat) screen, people can converse through text online with people who speak different languages.\n\nEach user sends messages in their native language, and if the participants speak different languages, their messages will be automatically translated.\n\nAdditionally, when a participating member speaks in a different language, their message will be translated into the receiver's language.\n\n## Docs\n\nWe have the following documentation pages available:\n\n- [Getting Started](./) - Introduction and usage guide for this app.\n- [Development](./translate) - An introduction to development methods for our services.\n- [Our Concepts](./our-concepts) - An explanation of our development concepts.\n"
	},
	{
		"path": "docs/10-getting-started/20-creating-a-project.md",
		"title": "Creating a Project",
		"content": "\n## Prerequisites\n\n- [MySQL Community Server 8.0.30](https://dev.mysql.com/downloads/mysql/) or higher\n- [Node.js](https://nodejs.org/) 18.4.0 or higher\n- npm 8.13.2 or higher\n\n## Prerequisites for Text-to-Speech\n\n- Set up [Google Cloud Text-to-Speech](https://cloud.google.com/text-to-speech)\n\n## Prerequisites for Translation\n\n- Set up [DeepL API](https://www.deepl.com/pro-api?cta=header-pro-api/)\n\n## Setting up the project\n\nHere are the steps:\n\n1. Get the project and setup:\n\n```bash\n# Clone the repo to your current directory\ngit clone https://github.com/sinProject-Inc/talk.git\n\n# Install the dependencies\ncd /talk\nnpm install\n```\n\n2. Create a database with the name \"talk\"\n3. Create a .env file by copying .env.example at the top level of the project\n4. Rewrite the .env file with your environment variables\n5. Push the initial schema and data to the database:\n\n```bash\nnpx prisma db push\nnpx prisma generate\nnpx prisma db seed\n```\n\n6. Install [Redis](https://redis.io/), and run the command: `redis-server`\n7. Run locally\n\n```bash\n# Start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n"
	},
	{
		"path": "docs/10-getting-started/10-introduction.md",
		"title": "Introduction",
		"description": "Thanks for reading this documentation.",
		"content": "\n## Before we begin\n\n> An email address is required to use the service.\n>\n> If you're reading this document to learn Svelte or SvelteKit, try the [Svelte tutorial](https://learn.svelte.dev/tutorial/welcome-to-svelte) first.\n>\n> If you get stuck, ask for help at [@iam_o_sin](https://twitter.com/iam_o_sin) on Twitter.\n\n## What is Talk?\n\nTalk is an app for conversing in real time with people who speak different languages. You can learn languages in addition to also having conversations through both voice and text.\n\n## What is sinProject?\n\n[sinProject Inc.](https://sinproject.net/) is an software development company in Osaka, Japan. We primarily use SvelteKit and TypeScript, but also work with other programming languages and frameworks.\n\n## What does Talk offer sinProject?\n\nTalk was created to establish coding conventions and development policies at sinProject Inc.\n\nThis guide covers various topics, such as how to use TypeScript, coding styles, GitHub workflows, defining GitHub Actions, login procedures, handling external APIs, and more. It serves as a comprehensive guideline for product development at sinProject.\n"
	}
]
