[
	{
		"path": "playwright",
		"title": "Playwright",
		"description": "",
		"content": "\nHow we automate our tests using Playwright.\n\nPlaywright is an E2E (end-to-end) testing framework.\n\nFile Name\n\nCreate an e2e directory, and name the files as \\*.spec.ts.\n\nConfiguration\n\nBasic changes\n\nChange the test directory, timeout duration, and other settings as needed.\n\nConfigure the reporter not to open automatically, and output a video when an error occurs.\n\n// playwright.config.ts\nconst config: PlaywrightTestConfig = {\n\ttestDir: './e2e',\n\ttimeout: 5 * 1000,\n\texpect: {\n\t\ttimeout: 2000,\n\t},\n\tretries: process.env.CI ? 1 : 0,\n\treporter: [['html', { open: 'never' }]],\n\tuse: {\n\t\tvideo: 'retain-on-failure',\n\t},\n}\n\nView this file on GitHub >\n\nTarget Browsers\n\nEnsure that tests are not run on browsers where testing is not necessary.\n\n// playwright.config.ts\nconst config: PlaywrightTestConfig = {\n\tprojects: [\n\t\t{\n\t\t\tname: 'chromium',\n\t\t\tuse: {\n\t\t\t\t...devices['Desktop Chrome'],\n\t\t\t},\n\t\t},\n\n\t\t// {\n\t\t//   name: 'firefox',\n\t\t//   use: {\n\t\t//     ...devices['Desktop Firefox'],\n\t\t//   },\n\t\t// },\n\n\t\t// ...\n\t}\n}\n\nView this file on GitHub >\n\nWeb Server\n\nTo perform tests quickly, use a development server. Also, change the baseURL.\n\n\twebServer: [\n\t\t{\n\t\t\tcommand: 'npm run dev',\n\t\t\turl: 'http://127.0.0.1:5173',\n\t\t\treuseExistingServer: !process.env.CI,\n\t\t},\n\t\t// {\n\t\t// \tcommand: 'npm run build && npm run preview',\n\t\t// \tport: 4173,\n\t\t// \treuseExistingServer: !process.env.CI,\n\t\t// },\n\t],\n\tuse: {\n\t\tbaseURL: 'http://127.0.0.1:5173',\n\t}\n\nView this file on GitHub >\n\nMore information >\n\nSetup\n\nSpecify processes to be executed beforehand, such as logging in. Add dependencies to the browser settings.\n\n// playwright.config.ts\nconst config: PlaywrightTestConfig = {\n\tprojects: [\n\t\t{ name: 'setup', testMatch: /.*\\.setup\\.ts/ },\n\n\t\t{\n\t\t\tname: 'chromium',\n\t\t\tuse: {\n\t\t\t\t...devices['Desktop Chrome'],\n\t\t\t},\n\t\t\tdependencies: ['setup'],\n\t\t},\n\t}\n}\n\nView this file on GitHub >\n\nSample Code\n\n// e2e/chat.spec.ts\nimport { Page, expect, test } from '@playwright/test'\n\nconst url = /chat\n\ntest.beforeEach(async ({ page }) => {\n\tawait page.goto('/chat')\n})\n\ntest('before sign in', async ({ page }) => {\n\tawait expect(page).toHaveTitle('Talk - Sign in')\n})\n\nIn cases where common setup is needed, such as for login processes:\n\n// e2e/chat.spec.ts\nimport { Page, expect, test } from '@playwright/test'\nimport { auth_file_path } from './lib/setup.js'\n\ntest.beforeEach(async ({ page }) => {\n\tawait page.goto('/chat')\n})\n\ntest.describe('after sign in', () => {\n\ttest.use({ storageState: auth_file_path })\n\n\ttest('has title', async ({ page }) => {\n\t\tawait expect(page).toHaveTitle('Talk - Chat')\n\t})\n\n\ttest('init focus', async ({ page }) => {\n\t\tconst name = page.getByPlaceholder('Name')\n\t\tawait expect(name).toBeFocused()\n\t})\n})\n\nView this file on GitHub >\n\nScripts\n\nWe have prepared the following scripts to execute Vitest.\n\n// package.json\n{\n\t\"scripts\": {\n\t\t\"test:e2e\": \"playwright test\",\n\t\t\"test:ci\": \"CI=true npm run test\"\n\t}\n}\n\nView this file on GitHub >\n\nVSCode Extension\n\nUse the VSCode Extension for testing.\n"
	},
	{
		"path": "vitest",
		"title": "Vitest",
		"description": "",
		"content": "\nHow we automate our tests using Vitest.\n\nVitest is a testing framework designed for unit testing.\n\nFile Name\n\nIn the same directory as the file of the code to be tested is in, write test code in a file named [filename of the code to be tested].test.ts.\n\nSample Code\n\n// src/lib/genera/valid_id.test.ts\nimport { expect, test } from 'vitest'\nimport { ValidId } from './valid_id'\n\ntest('1', () => {\n\texpect(new ValidId(1).id).toEqual(1)\n})\n\nWhen checking thrown errors:\n\n// src/lib/genera/valid_id.test.ts\nimport { expect, test } from 'vitest'\nimport { ValidId } from './valid_id'\n\ntest('NaN', () => {\n\texpect(() => new ValidId(NaN)).toThrow('id is not number')\n})\n\nView this file on GitHub >\n\nScripts\n\nWe have prepared the following scripts to execute Vitest.\n\n// package.json\n{\n\t\"scripts\": {\n\t\t\"test\": \"vitest\",\n\t\t\"coverage\": \"vitest run --coverage\",\n\t\t\"test:run\": \"vitest run\"\n\t}\n}\n\nView this file on GitHub >\n\nOptions\n\nChange the files to be included in the test run.\n\n// vite.config.ts\nexport default defineConfig({\n\ttest: {\n\t\tinclude: ['src/*/.test.ts'],\n\t},\n})\n\nView this file on GitHub >\n\nVSCode Extension\n\nUse the VSCode Extension for testing.\n"
	},
	{
		"path": "eslint",
		"title": "ESLint",
		"description": "",
		"content": "\nHow we define code style using ESLint.\n\nRules\n\nMake accessibility and return type mandatory.\nProhibit console output.\n\n// .eslintrc.cjs\nmodule.exports = {\n\trules: {\n\t\t'@typescript-eslint/explicit-member-accessibility': ['error'],\n\t\t'@typescript-eslint/explicit-function-return-type': ['error'],\n\t\t'no-console': ['error'],\n\t},\n}\n\nView this file on GitHub >\n\nNaming conventions\n\nSet variable names, argument names, and function names to snake_case.\nPrefix private variables with an underscore.\n\n// .eslintrc.cjs\nmodule.exports = {\n\trules: {\n\t\t'@typescript-eslint/naming-convention': [\n\t\t\t'error',\n\t\t\t{\n\t\t\t\tselector: 'typeParameter',\n\t\t\t\tformat: ['UPPER_CASE'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['class', 'interface', 'typeAlias'],\n\t\t\t\tformat: ['PascalCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tmodifiers: ['private'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tmodifiers: ['protected'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['method', 'function'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\t// format: ['snake_case', 'camelCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: [\n\t\t\t\t\t'property',\n\t\t\t\t\t'accessor',\n\t\t\t\t\t'parameter',\n\t\t\t\t\t'parameterProperty',\n\t\t\t\t\t'variable',\n\t\t\t\t\t'enumMember',\n\t\t\t\t],\n\t\t\t\tmodifiers: ['private'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: [\n\t\t\t\t\t'property',\n\t\t\t\t\t'accessor',\n\t\t\t\t\t'parameter',\n\t\t\t\t\t'parameterProperty',\n\t\t\t\t\t'variable',\n\t\t\t\t\t'enumMember',\n\t\t\t\t],\n\t\t\t\tmodifiers: ['protected'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t\tleadingUnderscore: 'require',\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['accessor', 'parameter', 'parameterProperty', 'enumMember'],\n\t\t\t\tformat: ['snake_case'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['property'],\n\t\t\t\tformat: ['snake_case', 'camelCase'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tselector: ['variable'],\n\t\t\t\tformat: ['snake_case', 'UPPER_CASE'],\n\t\t\t},\n\t\t],\n\t},\n}\n\nView this file on GitHub >\n"
	},
	{
		"path": "prettier",
		"title": "Prettier",
		"description": "",
		"content": "\nHow we use Prettier to automate formatting.\n\nConfiguration\n\nWhen creating a SvelteKit project, modify the following items in the generated .prettierrc file:\n\n// .prettierrc\n{\n\t\"trailingComma\": \"es5\",\n\t\"semi\": false\n}\n\nView this file on GitHub >\n\nFormatting\n\nEnable format on save and paste events.\nUse Prettier to format TypeScript, JavaScript, HTML, Svelte, and JSON files.\n\n// .vscode/settings.json\n{\n\t\"editor.formatOnSave\": true,\n\t\"editor.formatOnPaste\": true,\n\t\"[typescript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[javascript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[html]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[svelte]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[json]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t}\n}\n\nView this file on GitHub >\n"
	},
	{
		"path": "tsconfig",
		"title": "TypeScript Config",
		"description": "",
		"content": "\nHow we modify our TypeScript code style with tsconfig.json.\n\nTSConfig\n\nSet strict to true, and further increase strictness by modifying the following options:\n\nallowUnreachableCode\nexactOptionalPropertyTypes\nnoImplicitOverride\nnoImplicitReturns\nnoFallthroughCasesInSwitch\n\n/// tsconfig.json\n{\n\t\"extends\": \"./.svelte-kit/tsconfig.json\",\n\t\"compilerOptions\": {\n\t\t\"strict\": true,\n\n\t\t\"allowUnreachableCode\": false,\n\t\t\"exactOptionalPropertyTypes\": true,\n\t\t\"noImplicitOverride\": true,\n\t\t\"noImplicitReturns\": true,\n\t\t\"noFallthroughCasesInSwitch\": true\n\t\t// \"noUncheckedIndexedAccess\": true,\n\t}\n}\n\nView this file on GitHub >\n"
	},
	{
		"path": "sveltekit",
		"title": "SvelteKit",
		"description": "",
		"content": "\nWhen we create web applications, we use SvelteKit.\n\nThis documentation app is also written in SvelteKit and TypeScript. On the backend, it investigates the folder structure to create menu data, retrieves Markdown files, and applies styles using CSS in the browser.\n\nTutorial\n\nThe SvelteKit official website provides interactive tutorial. To learn about Svelte and SvelteKit, start by referring to this tutorials.\n\nDocs\n\nMore detailed information can be found in the Docs.\n\nSvelte Docs\nSvelteKit Docs\n"
	},
	{
		"path": "vscode-extensions",
		"title": "VSCode Extensions",
		"description": "",
		"content": "\nIntroducing the VS Code extensions we use at sinProject.\n\nGit\n\nGit Graph\n\nView a Git Graph of your repository, and perform Git actions from the graph.\n\nGitHub Pull Request and Issues\n\nPull Request and Issue Provider for GitHub\n\nGitHub Actions\n\nGitHub Actions workflows and runs for github.com hosted repositories in VS Code\n\nAI\n\nChatGPT - Genie AI\n\nYour best AI pair programmer. Save conversations and continue any time. A Visual Studio Code - ChatGPT Integration. Supports GPT-4, GPT3.5, GPT3 and Codex models. Create new files, view diffs with one click; your copilot to learn code, add tests, find bugs and more.\n\nTabnine AI Autocomplete for Javascript, Python, Typescript, PHP, Go, Java, Ruby & more\n\nJavaScript, Python, Java, Typescript & all other languages - AI Code completion plugin. Tabnine makes developers more productive by auto-completing their code.\n\nSvelte\n\nSvelte for VS Code\n\nSvelte language support for VS Code\n\nSvelte 3 snippets\n\nSvelte 3 Snippets for VS Code\n\nCSS\n\nTailwind CSS IntelliSense\n\nIntelligent Tailwind CSS tooling for VS Code\n\nCSS Peek\n\nAllow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.\n\nHTML\n\nAuto Rename Tag\n\nAuto rename paired HTML/XML tag\n\nHighlight Matching Tag\n\nHighlights matching closing and opening tags\n\nHTML Preview\n\nProvides ability to preview HTML documents.\n\nCode Style\n\nESLint\n\nIntegrates ESLint JavaScript into VS Code.\n\nPrettier - Code formatter\n\nCode formatter using prettier\n\nTrailing Spaces\n\nHighlight trailing spaces and delete them in a flash!\n\nCode Spell Checker\n\nSpelling checker for source code\n\nStylelint\n\nOfficial Stylelint extension for Visual Studio Code\n\nIntellisense\n\nPath Intellisense\n\nVisual Studio Code plugin that autocompletes filenames\n\nErrors\n\nError Lens\n\nImprove highlighting of errors, warnings and other language diagnostics.\n\nPretty TypeScript Errors\n\nMake TypeScript errors prettier and more human-readable in VSCode\n\nError Gutters\n\nShow error gutters to the right from line numbers\n\nTesting\n\nVitest\n\nRun and debug Vitest test cases\n\nPlaywright Test for VSCode\n\nRun Playwright Test tests in Visual Studio Code.\n\nDatabase Management\n\nPrisma\n\nAdds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.\n\nAPI\n\nREST Client\n\nREST Client for Visual Studio Code\n\nCode Execution\n\nCode Runner\n\nRun C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim,\n\nTurbo Console Log\n\nAutomating the process of writing meaningful log messages.\n\nCode Quality\n\nImport Cost\n\nDisplay import/require package size in the editor\n\nTheme\n\nMaterial Icon Theme\n\nMaterial Design Icons for Visual Studio Code\n\nTeam Collaboration\n\nLive Share\n\nReal-time collaborative development from the comfort of your favorite tools.\n\nLocalization\n\ni18n Ally\n\n🌍 All in one i18n extension for VS Code\n\nOther\n\nToDo Tree\n\nShow TODO, FIXME, etc. comment tags in a tree view\n\nBookmarks\n\nMark lines and jump to them\n\nPostCSS Language Support\n\nSyntax highlighting for modern and experimental CSS in VSCode\n"
	},
	{
		"path": "app-structure",
		"title": "App Structure",
		"description": "",
		"content": "\nThis app consists the following screens:\n\nTalk\nTranslate\nChat\nDocs\n\nTalk\n\nOn the Talk screen, you can select sentences and listen to how they are pronounced.\n\nAfter listening, you can check your own pronunciation through the app.\n\nYou can also register new sentences and add new translations.\n\nTranslate\n\nOn the Translate screen, people can have spoken conversations with other people who speak different languages.\n\nWhen you speak, your words will be displayed in the other party's language and you will hear their words in your own language.\n\nThis service allows you to converse in your own language and have a conversation with someone who speaks a different language.\n\nChat\n\nOn the Chat screen, people can converse through text online with people who speak different languages.\n\nEach user sends messages in their native language, and if the participants speak different languages, their messages will be automatically translated.\n\nAdditionally, when a participating member speaks in a different language, their message will be translated into the receiver's language.\n\nDocs\n\nWe have the following documentation pages available:\n\nGetting Started - Introduction and usage guide for this app.\nDevelopment - An introduction to development methods for our services.\nOur Concepts - An explanation of our development concepts.\n"
	},
	{
		"path": "creating-a-project",
		"title": "Creating a Project",
		"description": "",
		"content": "\nPrerequisites\n\nMySQL Community Server 8.0.30 or higher\nNode.js 18.4.0 or higher\nnpm 8.13.2 or higher\n\nPrerequisites for Text-to-Speech\n\nSet up Google Cloud Text-to-Speech\n\nPrerequisites for Translation\n\nSet up DeepL API\n\nSetting up the project\n\nHere are the steps:\n\nGet the project and setup:\n\nClone the repo to your current directory\ngit clone https://github.com/sinProject-Inc/talk.git\n\nInstall the dependencies\ncd /talk\nnpm install\n\nCreate a database with the name \"talk\"\nCreate a .env file by copying .env.example at the top level of the project\nRewrite the .env file with your environment variables\nPush the initial schema and data to the database:\n\nnpx prisma db push\nnpx prisma generate\nnpx prisma db seed\n\nInstall Redis, and run the command: redis-server\nRun locally\n\nStart the server and open the app in a new browser tab\nnpm run dev -- --open\n"
	},
	{
		"path": "introduction",
		"title": "Introduction",
		"description": "Thanks for reading this documentation.",
		"content": "\nBefore we begin\nAn email address is required to use the service.\nIf you're reading this document to learn Svelte or SvelteKit, try the Svelte tutorial first.\nIf you get stuck, ask for help at @iam_o_sin on Twitter.\n\nWhat is Talk?\n\nTalk is an app for conversing in real time with people who speak different languages. You can learn languages in addition to also having conversations through both voice and text.\n\nWhat is sinProject?\n\nsinProject Inc. is an software development company in Osaka, Japan. We primarily use SvelteKit and TypeScript, but also work with other programming languages and frameworks.\n\nWhat does Talk offer sinProject?\n\nTalk was created to establish coding conventions and development policies at sinProject Inc.\n\nThis guide covers various topics, such as how to use TypeScript, coding styles, GitHub workflows, defining GitHub Actions, login procedures, handling external APIs, and more. It serves as a comprehensive guideline for product development at sinProject.\n"
	}
]
